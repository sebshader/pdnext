#N canvas 506 40 639 585 12;
#X msg 147 374 print;
#X msg 128 320 start;
#X msg 135 348 stop;
#X obj 26 314 del 1000;
#X text 172 322 start streaming audio;
#X text 174 348 stop streaming audio;
#X obj 120 441 writesf~ 2, f 15;
#X msg 88 241 open /tmp/foo.wav;
#X obj 101 551 soundfiler;
#X text 26 550 see also:;
#X obj 153 407 osc~ 440;
#X msg 120 292 open -bytes 4 /tmp/foo.wav;
#X msg 108 267 open -bytes 3 /tmp/foo.wav;
#X obj 183 551 readsf~;
#X text 101 193 -rate <sample rate>;
#X text 66 116 The "open" message may take flag-style arguments as follows:;
#X obj 45 12 writesf~;
#X text 217 241 create a new 16-bit integer soundfile;
#X text 299 267 create a 24-bit integer soundfile;
#X text 313 291 create a 32-bit floating point soundfile;
#X text 101 157 -big \, -little (sample endianness), f 42;
#X text 238 435 The creation argument is the number of channels (1 to 64)., f 29;
#X obj 222 407 noise~;
#X obj 7 43 cnv 1 620 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 533 11 <= click;
#N canvas 687 149 575 357 reference 0;
#X obj 8 45 cnv 5 550 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 8 241 cnv 2 550 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000 0;
#X obj 8 276 cnv 2 550 2 empty empty ARGUMENT: 8 12 0 13 #202020 #000000 0;
#X obj 7 314 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X text 44 106 open <list> -;
#X text 86 179 print - prints information on Pd's terminal window., f 64;
#X obj 33 14 writesf~;
#X text 120 285 1) float - sets number of channels (default 1 \, max 64).;
#X text 142 106 takes a filename and optional flags: -wave \, -aiff \, -caf \, -next \, - big \, -little \, -bytes <float> \, -rate <float>;
#X obj 7 209 cnv 1 550 1 empty empty n: 8 12 0 13 #7c7c7c #000000 0;
#X obj 7 80 cnv 1 550 1 empty empty 1st: 8 12 0 13 #7c7c7c #000000 0;
#X text 86 140 start -;
#X text 142 140 start streaming audio., f 56;
#X text 93 159 stop -;
#X text 142 159 stop streaming audio, f 56;
#X text 92 55 'n' number of inlets specified by argument.;
#X text 79 87 signal - signal to write to a channel., f 65;
#X text 79 215 signal - signal to write to a channel., f 65;
#X text 147 247 NONE;
#X text 99 13 - record audio signals to a soundfile;
#X restore 439 12 pd reference;
#X text 101 139 -wave \, -aiff \, -caf \, -next (file extension);
#X obj 7 538 cnv 1 620 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 26 273 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X text 15 56 [writesf~] creates a subthread whose task is to write audio streams to disk. You need not provide any disk access time between "open" and "start" \, but between "stop" and the next "open" you must give the object time to flush all the output to disk., f 85;
#X text 111 11 - record audio signals to a soundfile;
#X msg 379 361 \; pd dsp \$1;
#X obj 379 326 set-dsp-tgl;
#X text 410 330 DSP on/off;
#X text 42 478 The soundfile is uncompressed 2- or 3-byte integer ("pcm") or 4- or 8-byte floating point. The soundfile format is determined by the file extension (ie. "foo.wav" \, "foo.aiff" \, "foo.caf" \, "foo.snd")., f 80;
#N canvas 809 273 480 224 8-byte 0;
#X text 19 62 The precision of the 8-byte samples is based on the precision of the Pure Data build. If Pd is single precision (using 32-bit float internally) \, the written samples will be cast from 4-byte float to 8-byte double when writing to a file with -bytes 8 argument. In this case it's better to write with 4-byte float samples for a smaller file with the same precision., f 63;
#X text 19 159 if Pd is double-precision \, writing 8-byte float samples will be full precision as Pd uses 64-bit float internally., f 63;
#X text 19 19 Writing 8-byte (ie. 64-bit) floating point samples are supported for the .wave \, .aiff/.aifc and .caf file types.;
#X restore 470 175 pd 8-byte float;
#X text 101 175 -bytes <2 \, 3 \, 4 \, or 8> (number of bytes resolution);
#X text 241 193 (affects the soundfile header but the file is NOT resampled), f 30;
#X text 406 550 updated for Pd version 0.55-0;
#X connect 0 0 6 0;
#X connect 1 0 6 0;
#X connect 2 0 6 0;
#X connect 3 0 2 0;
#X connect 7 0 6 0;
#X connect 10 0 6 0;
#X connect 11 0 6 0;
#X connect 12 0 6 0;
#X connect 22 0 6 1;
#X connect 28 0 1 0;
#X connect 28 0 3 0;
#X connect 32 0 31 0;
